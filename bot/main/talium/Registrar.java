package talium;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import talium.inputSystem.HealthManager;
import talium.stringTemplates.Template;
import talium.stringTemplates.TemplateService;
import talium.twitch4J.TwitchUserPermission;
import talium.twitchCommands.cooldown.ChatCooldown;
import talium.twitchCommands.cooldown.CooldownType;
import talium.twitchCommands.persistence.TriggerEntity;
import talium.twitchCommands.triggerEngine.TriggerCallback;
import talium.twitchCommands.triggerEngine.TriggerEngine;
import talium.twitchCommands.triggerEngine.TriggerProvider;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

/// Used as a central place to register actions and resources with parts of the bot
@Component
public class Registrar {

    static TemplateService templateService;

    @Autowired
    public Registrar(TemplateService templateService) {
        Registrar.templateService = templateService;
    }

    /// Register Custom HealthUI titel and description
    public static void registerHealthDescription(String self, String title, String description) {
        HealthManager.addCustomization(self, title, description);
    }

    /// Register Custom HealthUI titel and description
    public static void registerHealthDescription(Class<?> self, String title, String description) {
        HealthManager.addCustomization(self.getCanonicalName(), title, description);
    }

    public interface ResetableCache {
        void rebuild();
    }

    /// Register a function to reset/rebuild a application cache from the panel ui
    public static void registerResetableChache(String name, String description, ResetableCache cache) {
        //TODO register cache, show in ui, act on reset HTTP post
    }

    /// Register an autogenerated command with the bot
    public static class Command {
        //set all defaults
        String id;
        List<Pattern> regexPattern = new ArrayList<>();
        List<String> prefixPattern = new ArrayList<>();
        TwitchUserPermission permission = TwitchUserPermission.EVERYONE;
        ChatCooldown userCooldown = new ChatCooldown(CooldownType.MESSAGES, 0);
        ChatCooldown globalCooldown = new ChatCooldown(CooldownType.MESSAGES, 0);

        public Command(String id) {
            checkId(id);
            this.id = id;
        }

        public Command(String id, String prefixPattern) {
            checkId(id);
            this.id = id;
            this.prefixPattern.add(prefixPattern);
        }

        private static void checkId(String id) {
            if (id == null || id.isEmpty()) {
                throw new IllegalArgumentException("Command id cannot be null or empty");
            }
            if (id.startsWith("userCommand.")) {
                throw new IllegalArgumentException("Autogenerated command is not allowed to have the prefix \"userCommand.\" cause: '"+ id);
            }
        }

        public Command id(String id) {
            checkId(id);
            this.id = id;
            return this;
        }

        public Command prefixPattern(String prefixPattern) {
            this.prefixPattern.add(prefixPattern);
            return this;
        }

        public Command regexPattern(String regexPattern) {
            this.regexPattern.add(Pattern.compile(regexPattern));
            return this;
        }

        public Command permission(TwitchUserPermission permission) {
            this.permission = permission;
            return this;
        }

        public Command userCooldown(ChatCooldown userCooldown) {
            this.userCooldown = userCooldown;
            return this;
        }

        public Command globalCooldown(ChatCooldown globalCooldown) {
            this.globalCooldown = globalCooldown;
            return this;
        }

        /// Registers an automatically generated command with a callback
        ///
        /// @return TriggerEntity that was saved to the DB
        public TriggerEntity registerActionCommand(TriggerCallback callback) {
            return TriggerProvider.addCommandRegistration(this, callback);
        }

        /// Registers an automatically generated command without a callback, but with a template
        ///
        /// @return TriggerEntity that was saved to the DB
        public TriggerEntity registerTextCommand(String template) {
            return registerTextCommand(template, null);
        }

        /// Registers an automatically generated command without a callback, but with a template
        ///
        /// @return TriggerEntity that was saved to the DB
        public TriggerEntity registerTextCommand(String template, String messageColor) {
            templateService.saveIfAbsent(new Template(id, template, messageColor));
            return TriggerProvider.addCommandRegistration(this, TriggerEngine.TEXT_COMMAND_CALLBACK);
        }

        public String id() {
            return id;
        }

        public List<Pattern> regexPattern() {
            return regexPattern;
        }

        public List<String> prefixPattern() {
            return prefixPattern;
        }

        public TwitchUserPermission permission() {
            return permission;
        }

        public ChatCooldown userCooldown() {
            return userCooldown;
        }

        public ChatCooldown globalCooldown() {
            return globalCooldown;
        }
    }

    /// Registers a template with the context variables (captured environment)
    public static Template registerTemplate(Template template) {
        return templateService.saveIfAbsent(template);
    }

    /// Registers a template with the context variables (captured environment)
    public static Template registerTemplate(String templateId, String template, String messageColor) {
        return templateService.saveIfAbsent(new Template(templateId, template, messageColor));
    }

    /// Registers a template with the context variables (captured environment)
    public static Template registerTemplate(String templateId, String template) {
        return templateService.saveIfAbsent(new Template(templateId, template, null));
    }
}
